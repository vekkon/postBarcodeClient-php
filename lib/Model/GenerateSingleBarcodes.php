<?php
/**
 * GenerateSingleBarcodes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vekkon\PostBarcodeClient
 * @author   Vekkon
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vekkon\PostBarcodeClient\Model;

use \ArrayAccess;
use \Vekkon\PostBarcodeClient\ObjectSerializer;

/**
 * GenerateSingleBarcodes Class Doc Comment
 *
 * @category Class
 * @package  Vekkon\PostBarcodeClient
 * @author   Vekkon
 */
class GenerateSingleBarcodes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $modelName = 'GenerateSingleBarcodes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $types = [
        'language' => '\Vekkon\PostBarcodeClient\Model\Language',
        'franking_license' => 'string',
        'pp_franking' => 'bool',
        'customer' => '\Vekkon\PostBarcodeClient\Model\CustomerAddress',
        'customer_system' => 'string',
        'barcode_definition' => '\Vekkon\PostBarcodeClient\Model\SingleBarcodesDefinition',
        'sending_id' => 'string',
        'item' => '\Vekkon\PostBarcodeClient\Model\Item[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $formats = [
        'language' => null,
        'franking_license' => null,
        'pp_franking' => null,
        'customer' => null,
        'customer_system' => null,
        'barcode_definition' => null,
        'sending_id' => null,
        'item' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function types()
    {
        return self::$types;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function formats()
    {
        return self::$formats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'language' => 'language',
        'franking_license' => 'frankingLicense',
        'pp_franking' => 'ppFranking',
        'customer' => 'customer',
        'customer_system' => 'customerSystem',
        'barcode_definition' => 'barcodeDefinition',
        'sending_id' => 'sendingID',
        'item' => 'item'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'language' => 'setLanguage',
        'franking_license' => 'setFrankingLicense',
        'pp_franking' => 'setPpFranking',
        'customer' => 'setCustomer',
        'customer_system' => 'setCustomerSystem',
        'barcode_definition' => 'setBarcodeDefinition',
        'sending_id' => 'setSendingId',
        'item' => 'setItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'language' => 'getLanguage',
        'franking_license' => 'getFrankingLicense',
        'pp_franking' => 'getPpFranking',
        'customer' => 'getCustomer',
        'customer_system' => 'getCustomerSystem',
        'barcode_definition' => 'getBarcodeDefinition',
        'sending_id' => 'getSendingId',
        'item' => 'getItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$modelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['franking_license'] = isset($data['franking_license']) ? $data['franking_license'] : null;
        $this->container['pp_franking'] = isset($data['pp_franking']) ? $data['pp_franking'] : false;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['customer_system'] = isset($data['customer_system']) ? $data['customer_system'] : null;
        $this->container['barcode_definition'] = isset($data['barcode_definition']) ? $data['barcode_definition'] : null;
        $this->container['sending_id'] = isset($data['sending_id']) ? $data['sending_id'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ($this->container['franking_license'] === null) {
            $invalidProperties[] = "'franking_license' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['barcode_definition'] === null) {
            $invalidProperties[] = "'barcode_definition' can't be null";
        }
        if ($this->container['item'] === null) {
            $invalidProperties[] = "'item' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets language
     *
     * @return \Vekkon\PostBarcodeClient\Model\Language
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \Vekkon\PostBarcodeClient\Model\Language $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets franking_license
     *
     * @return string
     */
    public function getFrankingLicense()
    {
        return $this->container['franking_license'];
    }

    /**
     * Sets franking_license
     *
     * @param string $franking_license franking_license
     *
     * @return $this
     */
    public function setFrankingLicense($franking_license)
    {
        $this->container['franking_license'] = $franking_license;

        return $this;
    }

    /**
     * Gets pp_franking
     *
     * @return bool
     */
    public function getPpFranking()
    {
        return $this->container['pp_franking'];
    }

    /**
     * Sets pp_franking
     *
     * @param bool $pp_franking pp_franking
     *
     * @return $this
     */
    public function setPpFranking($pp_franking)
    {
        $this->container['pp_franking'] = $pp_franking;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Vekkon\PostBarcodeClient\Model\CustomerAddress
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Vekkon\PostBarcodeClient\Model\CustomerAddress $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_system
     *
     * @return string
     */
    public function getCustomerSystem()
    {
        return $this->container['customer_system'];
    }

    /**
     * Sets customer_system
     *
     * @param string $customer_system customer_system
     *
     * @return $this
     */
    public function setCustomerSystem($customer_system)
    {
        $this->container['customer_system'] = $customer_system;

        return $this;
    }

    /**
     * Gets barcode_definition
     *
     * @return \Vekkon\PostBarcodeClient\Model\SingleBarcodesDefinition
     */
    public function getBarcodeDefinition()
    {
        return $this->container['barcode_definition'];
    }

    /**
     * Sets barcode_definition
     *
     * @param \Vekkon\PostBarcodeClient\Model\SingleBarcodesDefinition $barcode_definition barcode_definition
     *
     * @return $this
     */
    public function setBarcodeDefinition($barcode_definition)
    {
        $this->container['barcode_definition'] = $barcode_definition;

        return $this;
    }

    /**
     * Gets sending_id
     *
     * @return string
     */
    public function getSendingId()
    {
        return $this->container['sending_id'];
    }

    /**
     * Sets sending_id
     *
     * @param string $sending_id sending_id
     *
     * @return $this
     */
    public function setSendingId($sending_id)
    {
        $this->container['sending_id'] = $sending_id;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \Vekkon\PostBarcodeClient\Model\Item[]
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \Vekkon\PostBarcodeClient\Model\Item[] $item item
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
