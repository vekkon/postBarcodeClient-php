<?php
/**
 * ReplacementCustomerDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DIGITAL COMMERCE BARCODE API
 *
 * Digital Commerce Swiss Post web REST API for the generation of the address label. With the \"Generate address label\" request, the combinations of selected basic and additional services/delivery instructions will be tested automatically, whether or not you have already done this yourself beforehand. With the \"Generate address label\" operation, the mailing data (e.g. COD amount) is also validated. For the \"Parcels\", \"Express\" and \"Solutions\" service groups, the mailing data is automatically transferred to DataTransfer. This means that you receive the same benefits as you would under DataTransfer. API documentation https://developer.post.ch/en/digital-commerce-api
 *
 * OpenAPI spec version: 1.2
 * Contact: digitalintegration@post.ch
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReplacementCustomerDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReplacementCustomerDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReplacementCustomerDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'license_no' => 'string',
        'label_layout' => 'string',
        'image_file_type' => 'string',
        'image_resolution' => 'int',
        'print_preview' => 'bool',
        'address' => '\Swagger\Client\Model\CustomerAddress',
        'logo' => '\Swagger\Client\Model\CustomerLogo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'license_no' => null,
        'label_layout' => null,
        'image_file_type' => null,
        'image_resolution' => 'int32',
        'print_preview' => null,
        'address' => null,
        'logo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'license_no' => 'licenseNo',
        'label_layout' => 'labelLayout',
        'image_file_type' => 'imageFileType',
        'image_resolution' => 'imageResolution',
        'print_preview' => 'printPreview',
        'address' => 'address',
        'logo' => 'logo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'license_no' => 'setLicenseNo',
        'label_layout' => 'setLabelLayout',
        'image_file_type' => 'setImageFileType',
        'image_resolution' => 'setImageResolution',
        'print_preview' => 'setPrintPreview',
        'address' => 'setAddress',
        'logo' => 'setLogo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'license_no' => 'getLicenseNo',
        'label_layout' => 'getLabelLayout',
        'image_file_type' => 'getImageFileType',
        'image_resolution' => 'getImageResolution',
        'print_preview' => 'getPrintPreview',
        'address' => 'getAddress',
        'logo' => 'getLogo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['license_no'] = isset($data['license_no']) ? $data['license_no'] : null;
        $this->container['label_layout'] = isset($data['label_layout']) ? $data['label_layout'] : null;
        $this->container['image_file_type'] = isset($data['image_file_type']) ? $data['image_file_type'] : null;
        $this->container['image_resolution'] = isset($data['image_resolution']) ? $data['image_resolution'] : null;
        $this->container['print_preview'] = isset($data['print_preview']) ? $data['print_preview'] : false;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['license_no'] === null) {
            $invalidProperties[] = "'license_no' can't be null";
        }
        if ($this->container['label_layout'] === null) {
            $invalidProperties[] = "'label_layout' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets license_no
     *
     * @return string
     */
    public function getLicenseNo()
    {
        return $this->container['license_no'];
    }

    /**
     * Sets license_no
     *
     * @param string $license_no license_no
     *
     * @return $this
     */
    public function setLicenseNo($license_no)
    {
        $this->container['license_no'] = $license_no;

        return $this;
    }

    /**
     * Gets label_layout
     *
     * @return string
     */
    public function getLabelLayout()
    {
        return $this->container['label_layout'];
    }

    /**
     * Sets label_layout
     *
     * @param string $label_layout label_layout
     *
     * @return $this
     */
    public function setLabelLayout($label_layout)
    {
        $this->container['label_layout'] = $label_layout;

        return $this;
    }

    /**
     * Gets image_file_type
     *
     * @return string
     */
    public function getImageFileType()
    {
        return $this->container['image_file_type'];
    }

    /**
     * Sets image_file_type
     *
     * @param string $image_file_type Defines valid formats of images.
     *
     * @return $this
     */
    public function setImageFileType($image_file_type)
    {
        $this->container['image_file_type'] = $image_file_type;

        return $this;
    }

    /**
     * Gets image_resolution
     *
     * @return int
     */
    public function getImageResolution()
    {
        return $this->container['image_resolution'];
    }

    /**
     * Sets image_resolution
     *
     * @param int $image_resolution Allowed values: 200, 300, 600
     *
     * @return $this
     */
    public function setImageResolution($image_resolution)
    {
        $this->container['image_resolution'] = $image_resolution;

        return $this;
    }

    /**
     * Gets print_preview
     *
     * @return bool
     */
    public function getPrintPreview()
    {
        return $this->container['print_preview'];
    }

    /**
     * Sets print_preview
     *
     * @param bool $print_preview print_preview
     *
     * @return $this
     */
    public function setPrintPreview($print_preview)
    {
        $this->container['print_preview'] = $print_preview;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\CustomerAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\CustomerAddress $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return \Swagger\Client\Model\CustomerLogo
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param \Swagger\Client\Model\CustomerLogo $logo logo
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
